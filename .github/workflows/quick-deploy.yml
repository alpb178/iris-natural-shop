name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      force_rebuild:
        description: 'Force rebuild Docker image'
        required: false
        default: false
        type: boolean

jobs:
  quick-deploy:
    runs-on: ubuntu-latest
    name: Quick Deploy to VPS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          cd ${{ secrets.PROJECT_PATH || '/opt/alejandro-louro' }}
          
          # Set environment based on input
          ENV="${{ github.event.inputs.environment }}"
          
          if [ "$ENV" = "production" ]; then
            ENV_FILE="env.production"
            DEPLOY_SCRIPT="./scripts/deploy-stack-prod.sh"
            STACK_NAME="alejandro-louro-prod"
            HEALTH_PORT="1337"
          else
            ENV_FILE="env.dev"
            DEPLOY_SCRIPT="./scripts/deploy-stack-simple.sh"
            STACK_NAME="alejandro-louro-dev"
            HEALTH_PORT="1339"
          fi
          
          echo "🚀 Quick deploying to $ENV environment..."
          
          # Pull latest changes
          git pull origin main
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Check if environment file exists
          if [ ! -f $ENV_FILE ]; then
            echo "❌ Error: $ENV_FILE not found!"
            echo "Creating from template..."
            cp env.example $ENV_FILE
            echo "⚠️  Please configure your $ENV_FILE with proper values!"
            exit 1
          fi
          
          # Force rebuild if requested
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🔄 Force rebuilding Docker image..."
            docker pull alegd/alejandro-louro-cms:latest
          fi
          
          # Deploy using the appropriate script
          echo "📦 Running deployment script: $DEPLOY_SCRIPT"
          $DEPLOY_SCRIPT
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
          # Check if Strapi is running
          HEALTH_URL="http://localhost:$HEALTH_PORT/health"
          
          if curl -f $HEALTH_URL > /dev/null 2>&1; then
            echo "✅ Quick deployment successful for $ENV environment!"
          else
            echo "❌ Strapi health check failed"
            echo "📋 Checking service logs..."
            docker service logs ${STACK_NAME}_strapi --tail=20
            exit 1
          fi
          
          # Show final status
          echo "📊 Final stack status:"
          docker stack services $STACK_NAME
          
          echo "🎉 Quick deployment completed!"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          ⚡ Quick deployment completed!
          - Environment: ${{ github.event.inputs.environment }}
          - Status: ${{ job.status }}
          - Force Rebuild: ${{ github.event.inputs.force_rebuild }}
          - Triggered by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 